2020 카카오 채용

1. 문자열 압축
- 문자열은 앞에서부터 정해진 자리수 만큼 잘라야함

1) 문자열 길이만큼 반복문 돌림 (i = 0 ~ string.length)
2) 문자열들 i만큼 cut 해서 큐에 삽입
3) 비교 후 같으면 count 올라감 안 같으면 count 안올라가고 바로 뒤에 붙임



2. 괄호 변환
- 균형잡힌 괄호 문자열 = ( ) 개수 같음
- 올바른 괄호 문자열= ( ) 짝이 맞은 경우
=> 균형잡힌 괄호 문자열 -> 올바른 괄호문자열로 변환


3. 자물쇠와 열쇠
- 자물쇠 크기 => 한칸 : 1x1 => 전체 : NxN
- 열쇠 => MxM
전부 정사각형

열쇠 : 회전, 이동 o
자물쇠 영역밖에 있는 열쇠 돌기, 홈은 여는데 영향x
자물쇠 영역 내의 열쇠 돌기, 자물쇠 홈 부분은 정확히 일치해야함 -> 열쇠 돌기, 자물쇠 돌기는 만나면 안됨
=> 자물쇠의 모든 홈을 채워서 빈곳 없어야 자물쇠 연다.

 0 1 2
0
1    (1,2)
2  (2,1)


(1,0)
(2,1)

1) 합쳤을 때 총합 = NxN




4. 가사 검색
- ?는 무조건 접두사, 접미사로만 연속으로 들어감

trie 문제
1) query는 접두사인 경우 (???ab), 접미사인 경우 (ab???), 전체인 경우 (?????) 3가지로 나뉨
2) 문자열 길이 별로 trie를 생성
3) word 를 거꾸로한(reverse)한 버전의 trie도 따로 생성
주의 : string을 거꾸로 만드는 작업을 하지 말것 (반복문을 역순으로 사용)


5. 기둥과 보
- 기둥 : 바닥 위에 있거나, 보의 한쪽 끝부분에 있거나, 다른 기둥위에 있거나
- 보 : 한 쪽 끝이 기둥 위에 잇거나, 양쪽 끝부분이 다른 보와 동시에 연결

build frame [x, y, a, b]
- x, y : 기둥, 보를 삭제할 좌표
- a : 설치, 삭제할 구조물 종류 ( 0 : 기둥, 1 : 보)
- b : 설치 or 삭제 (0 : 삭제, 1 : 설치)
- 벽면 벗어나는 설치 x
- 바닥 보 설치 x
- 입력제한 : 없는 구조물 삭제 x
- 입력제한 : 겹치도록 설치 x

return 구조물 [x, y, a]
- 가로길이가 3 인 2차원 배열
- x, y : 좌표
- a : 구조물 종류( 0 : 기둥, 1 : 보)
- x좌표 기준 오름차순 정렬, x좌표 같으면 y좌표 기준 오름차순 정렬
- x, y좌표가 모두 같으면 기둥이, 보보다 앞에


1) buildframe 길이만큼 반복문
2) 결과를 저장할 객체와 HashMap
3) 
설치 경우
기둥 : 
-바닥 위에 있는지 (y 가 0인지)
-보의 한쪽 끝에 있는지 (x-1, y  좌표 보가 있는지 -> (보의 x 혹은 x+1 = 기둥 x+1)
-다른 기둥 위에 있는지 (y+1이 현재 기둥의 y인 기둥이 있는지)
보 : 
- 한쪽 끝이 기둥 위에 있는지 ( (x,y) 혹은 (x+1, y) = 기둥 (x, y+1) )
- 양쪽끝 부분이 다른 보와 연결 ( (x,y) = 다른 보(x+1,y) & (x+1, y) = 다른 보(x,y) )
=> 조건 하나라도 만족하면 hashmap에 객체 추가

삭제 경우
기둥 : 
- 바닥 위에 없는 기둥이 생기는지 (y좌표가 현재 기둥의 y+1인 기둥 검사)
- 양쪽 끝부분이 다른 보와 모두 끊긴 보가 있는지 ( (x, y+1) 보, (x-1, y+1) 보 검사)

보 : 
- 양쪽 보들이 기둥이나 보와 연결되어 있는지
- 본인 양쪽 끝 위에 기둥이 있는지 



6. 외벽 점검

전제 조건
- 외벽 원형 구조
- 외벽 총 둘레 n 미터
- 취약 지점 존재
- 정북 방향지점이 0
- 취약 지점 위치 : 정북 방향에서 시계방향으로 떨어진 거리
- 친구들은 1시간만 작업 가능 -> 각자 1시간동안 이동가능한 거리 다름 -> 시계,반시계 방향으로 이동가능

input :
외벽길이 n, 취약 지점 위치 배열 weak, 각 친구가 1시간동안 이동가능한 거리 배열 dist 

output :
취약 지점 점검을 위해 보내야하는 친구 수 최소값


제한 사항
- 1<= n <= 200
- 1 <= weak 길이 <= 15
- 두 취약점의 위치가 같은 경우 x
- 취약 지점 위치는 오름차순정렬되어있음
- 0 <= weak <= n-1
- 1 <= dist길이 <= 8
- 1 <= dist <= 100
- 친구들 모두 투입해도 취약지점 전부 점검 불가 -> -1 return


방법
- 재귀 사용 dfs
- 가장 먼거리 갈수 있는 친구부터 투입 (출발지점 weak를 돌며 최대한 많은 지점을 점검할 수 있는 포인트 찾음)
- 점검 끝낸 지점 표시(visited) -> 그 다음 친구 투입해서 점검 끝난 지점 외에 출발지점 포인트 똑같이 찾음)
- 모든 포인트 점검하면 인원수 비교(min : current_people)



7. 블록 이동하기

전제조건
- 2x1 크기 로봇
- NxN 크기 지도 ( 0 : 빈칸, 1 : 벽)
- 시작 위치 (0,0)
- 로봇을 움직여서 (N, N) 위치까지 이동하는 것이 목표
- 가로방향으로 놓인 상태서 시작

- 어느 방향을 기준으로도 축을 삼아 회전 가능 (but 축과 대각선 방향에 있는 곳에 벽 없어야 함)
- 회전 시간 : 1초

input
: 지도 board[][]

output
: (N, N) 위치까지 이동하는데 최소 시간


해결
- BFS
- 로봇 회전 메서드
- 로봇 이동 메서드
- 객체 (현재 로봇 위치 정보 포함)

회전 케이스
- 1번축 기준 시계방향( 2번 x, 반시계방향
- 2번축 기준 시계방향, 반시계방향